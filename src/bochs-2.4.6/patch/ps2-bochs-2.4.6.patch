diff -ruNwb ./bochs-2.4.6/bochs.h ./bochs-2.4.6-patched/bochs.h
--- ./bochs-2.4.6/bochs.h	2010-09-20 22:43:16.000000000 +0200
+++ ./bochs-2.4.6-patched/bochs.h	2011-06-27 23:03:52.906250000 +0200
@@ -511,26 +511,68 @@
 
 #ifdef BX_LITTLE_ENDIAN
 
-#define WriteHostWordToLittleEndian(hostPtr,  nativeVar16) \
-    *((Bit16u*)(hostPtr)) = (nativeVar16)
-#define WriteHostDWordToLittleEndian(hostPtr, nativeVar32) \
-    *((Bit32u*)(hostPtr)) = (nativeVar32)
-#define WriteHostQWordToLittleEndian(hostPtr, nativeVar64) \
-    *((Bit64u*)(hostPtr)) = (nativeVar64)
-
-#define ReadHostWordFromLittleEndian(hostPtr,  nativeVar16) \
-    (nativeVar16) = *((Bit16u*)(hostPtr))
-#define ReadHostDWordFromLittleEndian(hostPtr, nativeVar32) \
-    (nativeVar32) = *((Bit32u*)(hostPtr))
-#define ReadHostQWordFromLittleEndian(hostPtr, nativeVar64) \
-    (nativeVar64) = *((Bit64u*)(hostPtr))
-
-#define CopyHostWordLittleEndian(hostAddrDst,  hostAddrSrc)  \
-    (* (Bit16u *)(hostAddrDst)) = (* (Bit16u *)(hostAddrSrc));
-#define CopyHostDWordLittleEndian(hostAddrDst,  hostAddrSrc) \
-    (* (Bit32u *)(hostAddrDst)) = (* (Bit32u *)(hostAddrSrc));
-#define CopyHostQWordLittleEndian(hostAddrDst,  hostAddrSrc) \
-    (* (Bit64u *)(hostAddrDst)) = (* (Bit64u *)(hostAddrSrc));
+#define WriteHostWordToLittleEndian(hostPtr,  nativeVar16) { \
+    ((Bit8u *)(hostPtr))[0] = (Bit8u)  (nativeVar16);        \
+    ((Bit8u *)(hostPtr))[1] = (Bit8u) ((nativeVar16)>>8);    \
+}
+#define WriteHostDWordToLittleEndian(hostPtr, nativeVar32) { \
+    ((Bit8u *)(hostPtr))[0] = (Bit8u)  (nativeVar32);        \
+    ((Bit8u *)(hostPtr))[1] = (Bit8u) ((nativeVar32)>>8);    \
+    ((Bit8u *)(hostPtr))[2] = (Bit8u) ((nativeVar32)>>16);   \
+    ((Bit8u *)(hostPtr))[3] = (Bit8u) ((nativeVar32)>>24);   \
+}
+#define WriteHostQWordToLittleEndian(hostPtr, nativeVar64) { \
+    ((Bit8u *)(hostPtr))[0] = (Bit8u)  (nativeVar64);        \
+    ((Bit8u *)(hostPtr))[1] = (Bit8u) ((nativeVar64)>>8);    \
+    ((Bit8u *)(hostPtr))[2] = (Bit8u) ((nativeVar64)>>16);   \
+    ((Bit8u *)(hostPtr))[3] = (Bit8u) ((nativeVar64)>>24);   \
+    ((Bit8u *)(hostPtr))[4] = (Bit8u) ((nativeVar64)>>32);   \
+    ((Bit8u *)(hostPtr))[5] = (Bit8u) ((nativeVar64)>>40);   \
+    ((Bit8u *)(hostPtr))[6] = (Bit8u) ((nativeVar64)>>48);   \
+    ((Bit8u *)(hostPtr))[7] = (Bit8u) ((nativeVar64)>>56);   \
+}
+
+#define ReadHostWordFromLittleEndian(hostPtr, nativeVar16) {   \
+    (nativeVar16) =  ((Bit16u) ((Bit8u *)(hostPtr))[0]) |      \
+                    (((Bit16u) ((Bit8u *)(hostPtr))[1])<<8) ;  \
+}
+#define ReadHostDWordFromLittleEndian(hostPtr, nativeVar32) {  \
+    (nativeVar32) =  ((Bit32u) ((Bit8u *)(hostPtr))[0]) |      \
+                    (((Bit32u) ((Bit8u *)(hostPtr))[1])<<8) |  \
+                    (((Bit32u) ((Bit8u *)(hostPtr))[2])<<16) | \
+                    (((Bit32u) ((Bit8u *)(hostPtr))[3])<<24);  \
+}
+#define ReadHostQWordFromLittleEndian(hostPtr, nativeVar64) {  \
+    (nativeVar64) =  ((Bit64u) ((Bit8u *)(hostPtr))[0]) |      \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[1])<<8) |  \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[2])<<16) | \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[3])<<24) | \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[4])<<32) | \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[5])<<40) | \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[6])<<48) | \
+                    (((Bit64u) ((Bit8u *)(hostPtr))[7])<<56);  \
+}
+
+#define CopyHostWordLittleEndian(hostAddrDst, hostAddrSrc) {   \
+    ((Bit8u *)(hostAddrDst))[0] = ((Bit8u *)(hostAddrSrc))[0]; \
+    ((Bit8u *)(hostAddrDst))[1] = ((Bit8u *)(hostAddrSrc))[1]; \
+}
+#define CopyHostDWordLittleEndian(hostAddrDst, hostAddrSrc) {  \
+    ((Bit8u *)(hostAddrDst))[0] = ((Bit8u *)(hostAddrSrc))[0]; \
+    ((Bit8u *)(hostAddrDst))[1] = ((Bit8u *)(hostAddrSrc))[1]; \
+    ((Bit8u *)(hostAddrDst))[2] = ((Bit8u *)(hostAddrSrc))[2]; \
+    ((Bit8u *)(hostAddrDst))[3] = ((Bit8u *)(hostAddrSrc))[3]; \
+}
+#define CopyHostQWordLittleEndian(hostAddrDst, hostAddrSrc) {  \
+    ((Bit8u *)(hostAddrDst))[0] = ((Bit8u *)(hostAddrSrc))[0]; \
+    ((Bit8u *)(hostAddrDst))[1] = ((Bit8u *)(hostAddrSrc))[1]; \
+    ((Bit8u *)(hostAddrDst))[2] = ((Bit8u *)(hostAddrSrc))[2]; \
+    ((Bit8u *)(hostAddrDst))[3] = ((Bit8u *)(hostAddrSrc))[3]; \
+    ((Bit8u *)(hostAddrDst))[4] = ((Bit8u *)(hostAddrSrc))[4]; \
+    ((Bit8u *)(hostAddrDst))[5] = ((Bit8u *)(hostAddrSrc))[5]; \
+    ((Bit8u *)(hostAddrDst))[6] = ((Bit8u *)(hostAddrSrc))[6]; \
+    ((Bit8u *)(hostAddrDst))[7] = ((Bit8u *)(hostAddrSrc))[7]; \
+}
 
 #else
 
diff -ruNwb ./bochs-2.4.6/bochsrc.txt ./bochs-2.4.6-patched/bochsrc.txt
--- ./bochs-2.4.6/bochsrc.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/bochsrc.txt	2011-07-05 12:42:10.000000000 +0200
@@ -0,0 +1,21 @@
+display_library: sdl, options="fullscreen"
+romimage: file="mass0:/BOCHS/BIOS/BIOS-bochs-latest.bin"
+cpu: count=1, ips=300000
+cpuid: mmx=1
+cpuid: stepping=5
+cpuid: cpuid_limit_winnt=0
+memory: guest=64, host=10
+vgaromimage: file="mass0:/BOCHS/BIOS/VGABIOS-lgpl-latest.bin"
+ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
+ata0-master: type=disk, path="mass0:/BOCHS/DISK/linux-minibootable.img", cylinders=900, heads=15, spt=17
+boot: disk
+floppy_bootsig_check: disabled=1
+panic: action=ignore
+error: action=ignore
+info: action=ignore
+debug: action=ignore
+vga_update_interval: 100000
+keyboard_serial_delay: 250
+keyboard_paste_delay: 100000
+mouse: enabled=0
+private_colormap: enabled=0
diff -ruNwb ./bochs-2.4.6/bxversion.h ./bochs-2.4.6-patched/bxversion.h
--- ./bochs-2.4.6/bxversion.h	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/bxversion.h	2011-06-27 23:03:52.906250000 +0200
@@ -0,0 +1,7 @@
+/////////////////////////////////////////////////////////////////////////
+// This file is checked in as bxversion.h.in.  The configure script
+// substitutes variables and creates bxversion.h.
+/////////////////////////////////////////////////////////////////////////
+
+#define VER_STRING "2.4.6"
+#define REL_STRING "Build for PS2 ported by KarasQ"
diff -ruNwb ./bochs-2.4.6/config.cc ./bochs-2.4.6-patched/config.cc
--- ./bochs-2.4.6/config.cc	2011-02-12 18:50:48.000000000 +0100
+++ ./bochs-2.4.6-patched/config.cc	2011-06-27 23:03:52.906250000 +0200
@@ -1879,6 +1879,7 @@
   if (fd == NULL) return -1;
 
   int retval = 0;
+#ifndef _EE
   do {
     ret = fgets(line, sizeof(line)-1, fd);
     line[sizeof(line) - 1] = '\0';
@@ -1894,6 +1895,39 @@
     }
     linenum++;
   } while (!feof(fd));
+#else
+  // KarasQ: feof or fgets seems to be broken in PS2SDK
+  // so this code is kind of workaround
+
+  bool seekeof = true;
+
+  do {
+    size_t len = 0;
+
+    while ( len < sizeof(line)-1 )
+    {
+      line[len] = fgetc(fd);
+      if ( line[len] < ' ' )
+      {
+         if ( line[len] == EOF )
+            seekeof = false;
+         line[len] = '\0';
+
+         break;
+      }
+      len++;
+    }
+
+    if ( len > 0 ) {
+       sprintf(context, "%s:%u", rcfile, linenum++);
+       if (parse_line_unformatted(context, line) < 0) {
+         retval = -1;
+         break;  // quit parsing after first error
+       }
+    }
+  } while ( seekeof );
+#endif
+
   fclose(fd);
   bochsrc_include_count--;
   return retval;
diff -ruNwb ./bochs-2.4.6/gdbstub.cc ./bochs-2.4.6-patched/gdbstub.cc
--- ./bochs-2.4.6/gdbstub.cc	2010-02-26 15:18:18.000000000 +0100
+++ ./bochs-2.4.6-patched/gdbstub.cc	2011-06-27 23:03:52.921875000 +0200
@@ -20,6 +20,8 @@
 //
 /////////////////////////////////////////////////////////////////////////
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/types.h>
@@ -939,3 +941,6 @@
   /* CPU loop */
   bx_cpu.cpu_loop(0);
 }
+#else
+#warning "This file has been excluded!"
+#endif
diff -ruNwb ./bochs-2.4.6/gui/macintosh.cc ./bochs-2.4.6-patched/gui/macintosh.cc
--- ./bochs-2.4.6/gui/macintosh.cc	2010-02-26 15:18:18.000000000 +0100
+++ ./bochs-2.4.6-patched/gui/macintosh.cc	2011-06-27 23:03:52.921875000 +0200
@@ -26,6 +26,9 @@
 // Define BX_PLUGGABLE in files that can be compiled into plugins.  For
 // platforms that require a special tag on exported symbols, BX_PLUGGABLE
 // is used to know when we are exporting symbols and when we are importing.
+
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 #define BX_PLUGGABLE
 
 // BOCHS INCLUDES
@@ -1694,3 +1697,6 @@
 }
 
 #endif /* if BX_WITH_MACOS */
+#else
+#warning "This file has been excluded!"
+#endif
diff -ruNwb ./bochs-2.4.6/gui/sdl.cc ./bochs-2.4.6-patched/gui/sdl.cc
--- ./bochs-2.4.6/gui/sdl.cc	2010-05-18 17:33:41.000000000 +0200
+++ ./bochs-2.4.6-patched/gui/sdl.cc	2011-06-27 23:03:52.937500000 +0200
@@ -43,6 +43,13 @@
 #include "win32dialog.h"
 #endif
 
+#ifdef _EE
+   // KarasQ: SDL_UpdateRect() seems to be broken in PS2 SDL port...
+   // This is kind of workaround, don't know how it will affect graphic.
+   // I think graphic in fullscreen mode will be fine
+   #define SDL_UpdateRect(scrn, x, y, w, h) SDL_Flip(scrn)
+#endif
+
 class bx_sdl_gui_c : public bx_gui_c {
 public:
   bx_sdl_gui_c() {}
@@ -317,7 +324,11 @@
 
   sdl_screen = NULL;
   sdl_fullscreen_toggle = 0;
+#ifndef _EE
   dimension_update(640,480);
+#else
+  dimension_update(640,512);
+#endif
 
   SDL_EnableKeyRepeat(250,50);
   SDL_WM_SetCaption(BOCHS_WINDOW_NAME, "Bochs");
diff -ruNwb ./bochs-2.4.6/gui/win32.cc ./bochs-2.4.6-patched/gui/win32.cc
--- ./bochs-2.4.6/gui/win32.cc	2011-01-25 16:49:32.000000000 +0100
+++ ./bochs-2.4.6-patched/gui/win32.cc	2011-06-27 23:03:52.937500000 +0200
@@ -18,7 +18,7 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 /////////////////////////////////////////////////////////////////////////
-
+#ifndef _EE
 //  Much of this file was written by:
 //  David Ross
 //  dross@pobox.com
@@ -2386,3 +2386,5 @@
 #endif /* if BX_USE_WINDOWS_FONTS */
 
 #endif /* if BX_WITH_WIN32 */
+#endif
+
diff -ruNwb ./bochs-2.4.6/gui/win32_enh_dbg_osdep.cc ./bochs-2.4.6-patched/gui/win32_enh_dbg_osdep.cc
--- ./bochs-2.4.6/gui/win32_enh_dbg_osdep.cc	2010-11-13 14:00:26.000000000 +0100
+++ ./bochs-2.4.6-patched/gui/win32_enh_dbg_osdep.cc	2011-06-27 23:03:52.953125000 +0200
@@ -8,7 +8,7 @@
 //
 //  Modified by Bruce Ewing
 //
-
+#ifndef _EE
 #include "config.h"
 
 #if BX_DEBUGGER && BX_DEBUGGER_GUI
@@ -1875,3 +1875,4 @@
 }
 
 #endif
+#endif
diff -ruNwb ./bochs-2.4.6/gui/win32dialog.cc ./bochs-2.4.6-patched/gui/win32dialog.cc
--- ./bochs-2.4.6/gui/win32dialog.cc	2010-07-03 07:34:27.000000000 +0200
+++ ./bochs-2.4.6-patched/gui/win32dialog.cc	2011-06-27 23:03:52.953125000 +0200
@@ -18,6 +18,7 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+#ifndef _EE
 #include "win32dialog.h"
 
 #if BX_USE_TEXTCONFIG && defined(WIN32) && (BX_WITH_WIN32 || BX_WITH_SDL)
@@ -789,3 +790,4 @@
 }
 
 #endif // BX_USE_TEXTCONFIG && defined(WIN32)
+#endif
diff -ruNwb ./bochs-2.4.6/gui/win32paramdlg.cc ./bochs-2.4.6-patched/gui/win32paramdlg.cc
--- ./bochs-2.4.6/gui/win32paramdlg.cc	2011-02-10 23:59:34.000000000 +0100
+++ ./bochs-2.4.6-patched/gui/win32paramdlg.cc	2011-06-27 23:03:52.953125000 +0200
@@ -18,6 +18,7 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+#ifndef _EE
 #include "win32dialog.h"
 
 #if BX_USE_TEXTCONFIG && defined(WIN32) && (BX_WITH_WIN32 || BX_WITH_SDL)
@@ -844,3 +845,4 @@
 }
 
 #endif // BX_USE_TEXTCONFIG && defined(WIN32)
+#endif
diff -ruNwb ./bochs-2.4.6/gui/wx.cc ./bochs-2.4.6-patched/gui/wx.cc
--- ./bochs-2.4.6/gui/wx.cc	2010-05-18 17:33:41.000000000 +0200
+++ ./bochs-2.4.6-patched/gui/wx.cc	2011-06-27 23:03:52.968750000 +0200
@@ -32,6 +32,7 @@
 // Define BX_PLUGGABLE in files that can be compiled into plugins.  For
 // platforms that require a special tag on exported symbols, BX_PLUGGABLE
 // is used to know when we are exporting symbols and when we are importing.
+#ifndef _EE
 #define BX_PLUGGABLE
 
 #include "bochs.h"
@@ -1706,3 +1707,5 @@
 #endif
 
 #endif /* if BX_WITH_WX */
+#endif
+
diff -ruNwb ./bochs-2.4.6/gui/wxdialog.cc ./bochs-2.4.6-patched/gui/wxdialog.cc
--- ./bochs-2.4.6/gui/wxdialog.cc	2010-11-19 19:42:11.000000000 +0100
+++ ./bochs-2.4.6-patched/gui/wxdialog.cc	2011-06-27 23:03:52.968750000 +0200
@@ -5,6 +5,7 @@
 // Define BX_PLUGGABLE in files that can be compiled into plugins.  For
 // platforms that require a special tag on exported symbols, BX_PLUGGABLE
 // is used to know when we are exporting symbols and when we are importing.
+#ifndef _EE
 #define BX_PLUGGABLE
 
 #include "config.h"              // definitions based on configure script
@@ -1665,3 +1666,4 @@
 }
 
 #endif /* if BX_WITH_WX */
+#endif
diff -ruNwb ./bochs-2.4.6/iodev/cdrom_amigaos.cc ./bochs-2.4.6-patched/iodev/cdrom_amigaos.cc
--- ./bochs-2.4.6/iodev/cdrom_amigaos.cc	2009-12-04 20:50:26.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/cdrom_amigaos.cc	2011-06-27 23:03:52.984375000 +0200
@@ -25,6 +25,7 @@
 // ioctl() calls and such.  Should be fairly easy to add support
 // for your OS if it is not supported yet.
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
 
 #include "bochs.h"
 #include "scsi_commands.h"
@@ -269,3 +270,8 @@
 
   read_block(buffer, lba, BX_CD_FRAMESIZE);
 }
+
+#else
+#warning "This file has been excluded!"
+#endif
+
diff -ruNwb ./bochs-2.4.6/iodev/cdrom_beos.cc ./bochs-2.4.6-patched/iodev/cdrom_beos.cc
--- ./bochs-2.4.6/iodev/cdrom_beos.cc	2009-12-04 20:50:26.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/cdrom_beos.cc	2011-06-27 23:03:52.984375000 +0200
@@ -18,6 +18,8 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 #include <SupportDefs.h>
 #include <Drivers.h>
 
@@ -72,3 +74,7 @@
 
     return st.st_size / block_size;
 }
+
+#else
+#warning "This file has been excluded!"
+#endif
diff -ruNwb ./bochs-2.4.6/iodev/cmos.cc ./bochs-2.4.6-patched/iodev/cmos.cc
--- ./bochs-2.4.6/iodev/cmos.cc	2009-12-04 20:50:26.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/cmos.cc	2011-06-27 23:03:52.984375000 +0200
@@ -22,8 +22,17 @@
 // Define BX_PLUGGABLE in files that can be compiled into plugins.  For
 // platforms that require a special tag on exported symbols, BX_PLUGGABLE
 // is used to know when we are exporting symbols and when we are importing.
+
 #define BX_PLUGGABLE
 
+#ifdef _EE
+#include "PS2Time.h"
+
+#define localtime(time) PS2Time::Instance()->getLocaltime(time)
+#define time(time)      PS2Time::Instance()->getTime(time)
+
+#endif
+
 #include "iodev.h"
 #include "cmos.h"
 
diff -ruNwb ./bochs-2.4.6/iodev/floppy.cc ./bochs-2.4.6-patched/iodev/floppy.cc
--- ./bochs-2.4.6/iodev/floppy.cc	2011-01-18 22:04:44.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/floppy.cc	2011-06-27 23:03:53.000000000 +0200
@@ -37,6 +37,11 @@
 // is used to know when we are exporting symbols and when we are importing.
 #define BX_PLUGGABLE
 
+#ifdef _EE
+   /* KarasQ: Those macros are missing in PS2SDK for this file */
+   #define  S_IFCHR     0x2000
+   #define  S_ISCHR(m)  (((m) & S_IFMT) == S_IFCHR)
+#endif
 
 extern "C" {
 #include <errno.h>
diff -ruNwb ./bochs-2.4.6/iodev/guest2host.cc ./bochs-2.4.6-patched/iodev/guest2host.cc
--- ./bochs-2.4.6/iodev/guest2host.cc	2009-12-04 20:50:27.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/guest2host.cc	2011-06-27 23:03:53.000000000 +0200
@@ -19,6 +19,8 @@
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 /////////////////////////////////////////////////////////////////////////
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 #include "iodev.h"
 #include "guest2host.h"
 
@@ -133,3 +135,8 @@
     bx_g2h.s.packet_count = 0; // Ready for next packet
   }
 }
+
+#else
+#warning "This file has been excluded!"
+#endif
+
diff -ruNwb ./bochs-2.4.6/iodev/hdimage.cc ./bochs-2.4.6-patched/iodev/hdimage.cc
--- ./bochs-2.4.6/iodev/hdimage.cc	2011-01-24 21:35:51.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/hdimage.cc	2011-06-28 00:39:02.328125000 +0200
@@ -183,7 +183,13 @@
 #ifndef WIN32
   /* look at size of image file to calculate disk geometry */
   struct stat stat_buf;
+#ifndef _EE
   int ret = fstat(fd, &stat_buf);
+#else
+  int ret = 0;
+  stat_buf.st_size = ::lseek(fd, 0, SEEK_END);
+  ::lseek(fd, 0, SEEK_SET);
+#endif
   if (ret) {
     BX_PANIC(("fstat() returns error!"));
   }
diff -ruNwb ./bochs-2.4.6/iodev/serial.cc ./bochs-2.4.6-patched/iodev/serial.cc
--- ./bochs-2.4.6/iodev/serial.cc	2011-01-14 23:15:37.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/serial.cc	2011-06-27 23:03:53.015625000 +0200
@@ -31,9 +31,11 @@
 #define BX_PLUGGABLE
 
 #ifndef WIN32
+#ifndef _EE
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <netdb.h>
+#endif
 #define closesocket(s)    close(s)
 typedef int SOCKET;
 #endif
@@ -303,6 +305,7 @@
         BX_SER_THIS mouse_type = SIM->get_param_enum(BXPN_MOUSE_TYPE)->get();
       } else if (!strncmp(mode, "socket", 6)) {
         BX_SER_THIS s[i].io_mode = BX_SER_MODE_SOCKET;
+#ifndef _EE
         struct sockaddr_in  sin;
         struct hostent      *hp;
         char                host[BX_PATHNAME_LEN];
@@ -377,6 +380,7 @@
         if (socket > 0)
           BX_INFO(("com%d - inet %s - socket_id: %d, ip:%s, port:%d",
             i+1, server ? "server" : "client", socket, host, port));
+#endif
       } else if (!strncmp(mode, "pipe", 4)) {
         if (strlen(dev) > 0) {
 #ifdef WIN32
diff -ruNwb ./bochs-2.4.6/iodev/vvfat.cc ./bochs-2.4.6-patched/iodev/vvfat.cc
--- ./bochs-2.4.6/iodev/vvfat.cc	2011-01-24 21:35:51.000000000 +0100
+++ ./bochs-2.4.6-patched/iodev/vvfat.cc	2011-06-27 23:03:53.015625000 +0200
@@ -38,8 +38,15 @@
 // is used to know when we are exporting symbols and when we are importing.
 #define BX_PLUGGABLE
 
+#ifdef _EE
+#include "PS2Time.h"
+#endif
+
 #ifndef WIN32
 #include <dirent.h>
+#ifdef _EE
+#include <sys/types.h>
+#endif
 #include <utime.h>
 #endif
 
@@ -64,12 +71,21 @@
 #define F_OK 0
 #endif
 
+#ifdef _EE
+extern int (*_ps2sdk_rename)(const char*, const char*);
+#define rename(old, new) _ps2sdk_rename(old, new);
+#endif
+
 // portable mkdir / rmdir
 static int bx_mkdir(const char *path)
 {
 #ifndef WIN32
+  #ifndef _EE
   return mkdir(path, 0755);
 #else
+  return mkdir(path);
+  #endif
+#else
   return (CreateDirectory(path, NULL) != 0) ? 0 : -1;
 #endif
 }
@@ -492,7 +508,11 @@
   struct tm t1;
 
   t = &t1;
+  #ifndef _EE
   localtime_r(&time, t);
+  #else
+  t1 = *PS2Time::Instance()->getLocaltime(&time);
+  #endif
   if (return_time)
     return htod16((t->tm_sec/2) | (t->tm_min<<5) | (t->tm_hour<<11));
   return htod16((t->tm_mday) | ((t->tm_mon+1)<<5) | ((t->tm_year-80)<<9));
@@ -1529,7 +1549,11 @@
   } else {
     ut.actime = ut.modtime;
   }
+  #ifndef _EE
+  // KarasQ: PS2SDK doesn't have utime function.
+  // I guess the files won't have proper date
   utime(path, &ut);
+  #endif
 #else
   hFile = CreateFile(path, GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
   if (hFile != INVALID_HANDLE_VALUE) {
diff -ruNwb ./bochs-2.4.6/ltdl.c ./bochs-2.4.6-patched/ltdl.c
--- ./bochs-2.4.6/ltdl.c	2009-02-08 10:05:51.000000000 +0100
+++ ./bochs-2.4.6-patched/ltdl.c	2011-06-27 23:03:53.031250000 +0200
@@ -33,6 +33,8 @@
 
 */
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 // ltdlconf.h added for Bochs
 #include "ltdlconf.h"
 
@@ -4065,3 +4067,8 @@
 
   return place;
 }
+
+#else
+#warning "This file has been excluded!"
+#endif
+
diff -ruNwb ./bochs-2.4.6/main.cc ./bochs-2.4.6-patched/main.cc
--- ./bochs-2.4.6/main.cc	2010-11-21 13:02:12.000000000 +0100
+++ ./bochs-2.4.6-patched/main.cc	2011-07-05 12:53:27.203125000 +0200
@@ -18,6 +18,10 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+#ifdef _EE
+#include "PS2Init.h"
+#endif
+
 #include "bochs.h"
 #include "param_names.h"
 #include "gui/textconfig.h"
@@ -255,8 +259,10 @@
 int bxmain (void) {
 #ifdef HAVE_LOCALE_H
   // Initialize locale (for isprint() and other functions)
+#ifndef _EE
   setlocale (LC_ALL, "");
 #endif
+#endif
   bx_user_quit = 0;
   bx_init_siminterface();   // create the SIM object
   static jmp_buf context;
@@ -477,6 +483,24 @@
 {
   bx_startup_flags.argc = argc;
   bx_startup_flags.argv = argv;
+
+#ifdef _EE
+  PS2_Init();
+
+  if ( argc <= 1 )
+  {
+     // Default arguments for PlayStation 2
+     bx_startup_flags.argc = 4;
+     bx_startup_flags.argv = (char**) malloc((bx_startup_flags.argc+1) * sizeof(char**));
+
+     bx_startup_flags.argv[0] = argv[0];
+     bx_startup_flags.argv[1] = "-q";
+     bx_startup_flags.argv[2] = "-f";
+     bx_startup_flags.argv[3] = "bochsrc.txt";
+     bx_startup_flags.argv[4] = NULL;
+  }
+#endif
+
 #if BX_WITH_SDL && defined(WIN32)
   // if SDL/win32, try to create a console window.
   if (!RedirectIOToConsole()) {
@@ -1184,11 +1208,13 @@
   BX_DEBUG(("bx_init_hardware is setting signal handlers"));
 // if not using debugger, then we can take control of SIGINT.
 #if !BX_DEBUGGER
+#ifndef _EE
   signal(SIGINT, bx_signal_handler);
 #endif
+#endif
 
 #if BX_SHOW_IPS
-#if !defined(WIN32)
+#if !defined(WIN32) && !defined(_EE)
   signal(SIGALRM, bx_signal_handler);
   alarm(1);
 #endif
@@ -1228,8 +1254,10 @@
   // restore signal handling to defaults
 #if BX_DEBUGGER == 0
   BX_INFO(("restoring default signal behavior"));
+#ifndef _EE
   signal(SIGINT, SIG_DFL);
 #endif
+#endif
 
 #if BX_SHOW_IPS
 #if !defined(__MINGW32__) && !defined(_MSC_VER)
@@ -1281,7 +1309,7 @@
            (unsigned) ips_count, (unsigned) (ticks_count/counts), (unsigned) counts);
       }
     }
-#if !defined(WIN32)
+#if !defined(WIN32) && !defined(_EE)
     signal(SIGALRM, bx_signal_handler);
     alarm(1);
 #endif
diff -ruNwb ./bochs-2.4.6/Makefile.eeglobal ./bochs-2.4.6-patched/Makefile.eeglobal
--- ./bochs-2.4.6/Makefile.eeglobal	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/Makefile.eeglobal	2011-06-27 23:03:53.046875000 +0200
@@ -0,0 +1,61 @@
+# _____     ___ ____     ___ ____
+#  ____|   |    ____|   |        | |____|
+# |     ___|   |____ ___|    ____| |    \    PS2DEV Open Source Project.
+#-----------------------------------------------------------------------
+# Copyright 2001-2004, ps2dev - http://www.ps2dev.org
+# Licenced under Academic Free License version 2.0
+# Review ps2sdk README & LICENSE files for further details.
+#
+# $Id$
+
+# Include directories
+EE_INCS := -I$(PS2SDK)/ee/include -I$(PS2SDK)/common/include -I. $(EE_INCS)
+
+# C compiler flags
+EE_CFLAGS := -D_EE -Wall -g -O2 -G0 $(EE_CFLAGS)
+
+# C++ compiler flags
+EE_CXXFLAGS := -D_EE -Wall -g -O2 -G0 $(EE_CXXFLAGS)
+
+# Linker flags
+EE_LDFLAGS := -L$(PS2SDK)/ee/lib $(EE_LDFLAGS)
+
+# Assembler flags
+EE_ASFLAGS := -G0 $(EE_ASFLAGS)
+
+# Link with following libraries.  This is a special case, and instead of
+# allowing the user to override the library order, we always make sure
+# libkernel is the last library to be linked.
+EE_LIBS += -lc -lstdc++ -ln -lkernel
+
+# Externally defined variables: EE_BIN, EE_OBJS, EE_LIB
+
+# These macros can be used to simplify certain build rules.
+EE_C_COMPILE = $(EE_CC) $(EE_CFLAGS) $(EE_INCS)
+EE_CXX_COMPILE = $(EE_CXX) $(EE_CXXFLAGS) $(EE_INCS)
+
+%.o : %.c
+	$(EE_CC) $(EE_CFLAGS) $(EE_INCS) -c $< -o $@
+
+%.o : %.cc
+	$(EE_CXX) $(EE_CXXFLAGS) $(EE_INCS) -c $< -o $@
+
+%.o : %.cpp
+	$(EE_CXX) $(EE_CXXFLAGS) $(EE_INCS) -c $< -o $@
+
+%.o : %.S
+	$(EE_CC) $(EE_CFLAGS) $(EE_INCS) -c $< -o $@
+
+%.o : %.s
+	$(EE_AS) $(EE_ASFLAGS) $< -o $@
+
+$(EE_BIN) : $(EE_OBJS) $(PS2SDK)/ee/startup/crt0.o
+	$(EE_CC) -mno-crt0 -T$(PS2SDK)/ee/startup/linkfile $(EE_CFLAGS) \
+		-o $(EE_BIN) $(PS2SDK)/ee/startup/crt0.o $(EE_OBJS) $(EE_LDFLAGS) $(EE_LIBS)
+
+$(EE_ERL) : $(EE_OBJS)
+	$(EE_CC) -mno-crt0 -o $(EE_ERL) $(EE_OBJS) $(EE_CFLAGS) $(EE_LDFLAGS) -Wl,-r -Wl,-d
+	$(EE_STRIP) --strip-unneeded -R .mdebug.eabi64 -R .reginfo -R .comment $(EE_ERL)
+
+$(EE_LIB) : $(EE_OBJS)
+	$(EE_AR) cru $(EE_LIB) $(EE_OBJS)
diff -ruNwb ./bochs-2.4.6/Makefile.ps2 ./bochs-2.4.6-patched/Makefile.ps2
--- ./bochs-2.4.6/Makefile.ps2	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/Makefile.ps2	2011-06-27 23:03:53.046875000 +0200
@@ -0,0 +1,43 @@
+# Makefile Bochs-2.4.6 port by KarasQ <k4rasq@gmail.com>
+# Build makefile for PlayStaion 2
+
+# Output target
+EE_BIN = PS2Bochs.elf
+
+# Dirs with source files
+SRC_DIRS = ./ ./cpu ./fpu ./gui ./instrument/stubs ./iodev ./memory ./ps2 ./ps2/cdvd
+
+# Dirs with IRX modules
+IRX_DIRS = ./ps2/irx 
+
+# Looking for source files in $(SRC_DIRS)
+SRC_FILES_C = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
+SRC_FILES_CPP = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+SRC_FILES_CC = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cc))
+
+EE_IRX	= $(foreach dir,$(IRX_DIRS),$(wildcard $(dir)/*.irx))
+
+# Objects files
+EE_OBJS = $(EE_IRX:.irx=.o) $(SRC_FILES_CC:.cc=.o) $(SRC_FILES_CPP:.cpp=.o) $(SRC_FILES_C:.c=.o)
+EE_LIBS = -lm -lsdl -lsdlmain
+
+EE_INCS = -I$(PS2DEV)/SDL/include -I./ps2 -I./instrument/stubs -I./iodev
+EE_LDFLAGS += -L$(PS2DEV)/SDL/lib
+
+all: $(EE_BIN) pack
+	@echo "Sucessfully compiled!"
+
+$(EE_IRX:.irx=.s):
+	bin2s $(@:.s=.irx) $@ $(notdir $(@:.s=_irx))
+
+pack:
+	ps2-packer-lite $(EE_BIN) $(EE_BIN:.elf=-packed.elf)
+	
+config: clean
+	cp ../config.h/ps2-config.h config.h
+
+clean:
+	rm -f $(EE_BIN) $(EE_BIN:.elf=-packed.elf) $(EE_OBJS) $(EE_IRX:.irx=.s) config.h
+
+include $(PS2SDK)/samples/Makefile.pref
+include Makefile.eeglobal
diff -ruNwb ./bochs-2.4.6/Makefile.win32 ./bochs-2.4.6-patched/Makefile.win32
--- ./bochs-2.4.6/Makefile.win32	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/Makefile.win32	2011-06-27 23:03:53.046875000 +0200
@@ -0,0 +1,53 @@
+# Makefile Bochs-2.4.6 by KarasQ <k4rasq@gmail.com>
+# Build makefile for Win32 SDL version
+
+# Output target
+BIN = Bochs.exe
+
+# Set dirs where compiler should look for headers (e.g. libsdl.a)
+LIB_DIRS = ../../../x86/lib
+
+# Set dirs where compiler should look for EXTERNAL headers (e.g. SDL headrs)
+INC_DIRS = $(LIB_DIRS)/include
+
+# Dirs with source files
+SRC_DIRS = ./ ./cpu ./fpu ./gui ./instrument/stubs ./iodev ./memory
+
+# Looking for source files in $(SRC_DIRS)
+SRC_FILES_C = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
+SRC_FILES_CPP = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+SRC_FILES_CC = $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cc))
+
+# Objects files
+OBJS = $(SRC_FILES_CC:.cc=.o) $(SRC_FILES_CPP:.cpp=.o) $(SRC_FILES_C:.c=.o)
+
+# Set dirs where compiler should look for headers
+INCS = -I$(INC_DIRS)/SDL -I./ -I./instrument/stubs -I./iodev
+
+# Compiler flags
+FLAGS = -O2 -s -D_EXCLUDE_WIN32_
+
+# Linker flags
+LDFLAGS = -mwindows -L$(LIB_DIRS)
+LIBS = -lws2_32 -lwinmm -lcomdlg32 -lcomctl32 -lgdi32 -lm -lmingw32 -lsdlmain -lsdl
+
+all: $(BIN)
+	@echo "Sucessfully compiled!"
+
+# Rules
+
+%.o: %.c
+	gcc $(FLAGS) $(INCS) -c $< -o $@
+%.o: %.cc
+	g++ $(FLAGS) $(INCS) -c $< -o $@
+%.o: %.cpp
+	g++ $(FLAGS) $(INCS) -c $< -o $@
+
+$(BIN): $(OBJS)
+	g++ $(FLAGS) $(INCS) $(LDFLAGS) $(OBJS) -o $(BIN) $(LIBS)
+
+config: clean
+	cp ../config.h/win32-config.h config.h
+	
+clean:
+	rm -f $(BIN) $(OBJS) config.h
diff -ruNwb ./bochs-2.4.6/memory/misc_mem.cc ./bochs-2.4.6-patched/memory/misc_mem.cc
--- ./bochs-2.4.6/memory/misc_mem.cc	2011-02-11 16:33:08.000000000 +0100
+++ ./bochs-2.4.6-patched/memory/misc_mem.cc	2011-06-27 23:03:53.062500000 +0200
@@ -263,7 +263,15 @@
     }
     return;
   }
+
+#ifndef _EE
   ret = fstat(fd, &stat_buf);
+#else
+  ret = 0;
+  stat_buf.st_size = lseek(fd, 0, SEEK_END);
+  lseek(fd, 0, SEEK_SET);
+#endif
+
   if (ret) {
     if (type < 2) {
       BX_PANIC(("ROM: couldn't stat ROM image file '%s'.", path));
diff -ruNwb ./bochs-2.4.6/osdep.cc ./bochs-2.4.6-patched/osdep.cc
--- ./bochs-2.4.6/osdep.cc	2009-12-04 21:02:12.000000000 +0100
+++ ./bochs-2.4.6-patched/osdep.cc	2011-06-27 23:03:53.062500000 +0200
@@ -240,7 +240,12 @@
 #if !BX_HAVE_MKSTEMP
 int bx_mkstemp(char *tpl)
 {
+#ifndef _EE
+  // KarasQ: There is no mktemp in PS2SDK
+  // TODO: replacement for mktemp should be made here.
+  // Don't know how it affect if we miss it here
   mktemp(tpl);
+#endif
   return ::open(tpl, O_RDWR | O_CREAT | O_TRUNC
 #  ifdef O_BINARY
             | O_BINARY
diff -ruNwb ./bochs-2.4.6/plex86-interface.cc ./bochs-2.4.6-patched/plex86-interface.cc
--- ./bochs-2.4.6/plex86-interface.cc	2009-12-28 10:26:22.000000000 +0100
+++ ./bochs-2.4.6-patched/plex86-interface.cc	2011-06-27 23:03:53.078125000 +0200
@@ -18,6 +18,8 @@
 //  License along with this library; if not, write to the Free Software
 //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+#if !defined(_EE) && !defined(_EXCLUDE_WIN32_)
+
 #include "bochs.h"
 #include <sys/ioctl.h>
 #include <unistd.h>
@@ -432,3 +434,8 @@
 {
   return(1); // OK.
 }
+
+#else
+#warning "This file has been excluded!"
+#endif
+
diff -ruNwb ./bochs-2.4.6/ps2/cdvd/cdvd.h ./bochs-2.4.6-patched/ps2/cdvd/cdvd.h
--- ./bochs-2.4.6/ps2/cdvd/cdvd.h	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/cdvd/cdvd.h	2011-06-27 23:03:53.078125000 +0200
@@ -0,0 +1,45 @@
+#ifndef _CDVD_H
+#define _CDVD_H
+
+// This header contains the common definitions for libcdvd
+// that are used by both IOP and EE sides
+
+#define	CDVD_IRX		0xB001337
+#define CDVD_FINDFILE	0x01
+#define	CDVD_GETDIR 	0x02
+#define CDVD_STOP		0x04
+#define CDVD_TRAYREQ	0x05
+#define CDVD_DISKREADY	0x06
+#define CDVD_FLUSHCACHE	0x07
+#define CDVD_GETSIZE	0x08
+
+
+struct TocEntry
+{
+	u32		fileLBA;
+	u32		fileSize;
+	u8		fileProperties;
+	u8		padding1[3];
+	char	filename[128+1];
+	u8		padding2[3];
+} __attribute__((packed));
+
+
+enum CDVD_getMode {
+	CDVD_GET_FILES_ONLY = 1,
+	CDVD_GET_DIRS_ONLY = 2,
+	CDVD_GET_FILES_AND_DIRS = 3
+};
+
+// Macros for TrayReq
+#define CdTrayOpen		0
+#define CdTrayClose		1
+#define CdTrayCheck		2
+
+// Macros for DiskReady
+#define CdComplete		0x02
+#define CdNotReady		0x06
+#define CdBlock			0x00
+#define CdNonBlock		0x01		
+
+#endif // _CDVD_H
diff -ruNwb ./bochs-2.4.6/ps2/cdvd/cdvd_rpc.c ./bochs-2.4.6-patched/ps2/cdvd/cdvd_rpc.c
--- ./bochs-2.4.6/ps2/cdvd/cdvd_rpc.c	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/cdvd/cdvd_rpc.c	2011-06-27 23:03:53.078125000 +0200
@@ -0,0 +1,128 @@
+#include <tamtypes.h>
+#include <kernel.h>
+#include <sifrpc.h>
+#include <stdarg.h>
+#include <string.h>
+
+#include "cdvd_rpc.h"
+
+int k_sceSifDmaStat(unsigned int id);
+static unsigned sbuff[0x1300] __attribute__((aligned (64)));
+static SifRpcClientData_t cd0;
+
+int cdvd_inited = 0;
+
+int CDVD_Init()
+{
+	int i;
+
+	while(1){
+		if (SifBindRpc( &cd0, CDVD_IRX, 0) < 0) return -1; // bind error
+ 		if (cd0.server != 0) break;
+    	i = 0x10000;
+    	while(i--);
+	}
+
+	cdvd_inited = 1;
+
+	return 0;
+}
+
+int CDVD_DiskReady(int mode)
+{
+	if(!cdvd_inited) return -1;
+
+	sbuff[0] = mode;
+
+	SifCallRpc(&cd0,CDVD_DISKREADY,0,(void*)(&sbuff[0]),4,(void*)(&sbuff[0]),4,0,0);
+
+	return sbuff[0];
+}
+
+int CDVD_FindFile(const char* fname, struct TocEntry* tocEntry)
+{
+	if(!cdvd_inited) return -1;
+
+	strncpy((char*)&sbuff,fname,1024);
+
+	SifCallRpc(&cd0,CDVD_FINDFILE,0,(void*)(&sbuff[0]),1024,(void*)(&sbuff[0]),sizeof(struct TocEntry)+1024,0,0);
+
+	memcpy(tocEntry, &sbuff[256], sizeof(struct TocEntry));
+
+	return sbuff[0];
+}
+
+void CDVD_Stop()
+{
+	if(!cdvd_inited) return;
+
+	SifCallRpc(&cd0,CDVD_STOP,0,(void*)(&sbuff[0]),0,(void*)(&sbuff[0]),0,0,0);
+
+	return;
+}
+
+int CDVD_TrayReq(int mode)
+{
+	if(!cdvd_inited) return -1;
+
+	SifCallRpc(&cd0,CDVD_TRAYREQ,0,(void*)(&sbuff[0]),4,(void*)(&sbuff[0]),4,0,0);
+
+	return sbuff[0];
+}
+
+int CDVD_GetDir(const char* pathname, const char* extensions, enum CDVD_getMode getMode, struct TocEntry tocEntry[], unsigned int req_entries, char* new_pathname)
+{
+	unsigned int num_entries;
+
+	if(!cdvd_inited) return -1;
+
+	// copy the requested pathname to the rpc buffer
+	strncpy((char*)sbuff,pathname,1023);
+
+	// copy in the extension list to the rpc buffer
+	if (extensions == NULL)
+	{
+		// Can't copy in the extension list since there isnt one, so just null the string in the rpc buffer
+		sbuff[1024/4] = 0;
+	}
+	else
+	{
+		strncpy((char*)&sbuff[1024/4],extensions,127);
+	}
+
+	sbuff[1152/4] = getMode;
+
+	sbuff[1156/4] = (int)tocEntry;
+
+	sbuff[1160/4] = req_entries;
+
+	SifWriteBackDCache(tocEntry, req_entries*sizeof(struct TocEntry));
+
+	// This will get the directory contents, and fill tocEntry via DMA
+	SifCallRpc(&cd0,CDVD_GETDIR,0,(void*)(&sbuff[0]),1024+128+4+4+4,(void*)(&sbuff[0]),4+1024,0,0);
+
+	num_entries = sbuff[0];
+
+	if (new_pathname != NULL)
+		strncpy(new_pathname,(char*)&sbuff[1],1023);
+
+	return (num_entries);
+}
+
+void CDVD_FlushCache()
+{
+	if(!cdvd_inited) return;
+
+	SifCallRpc(&cd0,CDVD_FLUSHCACHE,0,(void*)(&sbuff[0]),0,(void*)(&sbuff[0]),0,0,0);
+
+	return;
+}
+
+unsigned int CDVD_GetSize()
+{
+	if(!cdvd_inited) return;
+
+	SifCallRpc(&cd0,CDVD_GETSIZE,0,(void*)(&sbuff[0]),0,(void*)(&sbuff[0]),4,0,0);
+
+	return sbuff[0];
+}
diff -ruNwb ./bochs-2.4.6/ps2/cdvd/cdvd_rpc.h ./bochs-2.4.6-patched/ps2/cdvd/cdvd_rpc.h
--- ./bochs-2.4.6/ps2/cdvd/cdvd_rpc.h	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/cdvd/cdvd_rpc.h	2011-06-27 23:03:53.093750000 +0200
@@ -0,0 +1,28 @@
+#ifndef _CDVD_RPC_H
+#define _CDVD_RPC_H
+
+// include the common definitions
+#include "cdvd.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+int CDVD_Init();
+int CDVD_DiskReady(int mode);
+int CDVD_FindFile(const char* fname, struct TocEntry* tocEntry);
+void CDVD_Stop();
+int CDVD_TrayReq(int mode);
+int CDVD_DiskReady(int mode);
+int CDVD_GetDir(const char* pathname, const char* extensions, enum CDVD_getMode getMode, struct TocEntry tocEntry[], unsigned int req_entries, char* new_pathname);
+void CDVD_FlushCache();
+unsigned int CDVD_GetSize();
+
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#endif // _CDVD_H
Files ./bochs-2.4.6/ps2/irx/cdvd.irx and ./bochs-2.4.6-patched/ps2/irx/cdvd.irx differ
Files ./bochs-2.4.6/ps2/irx/usbd.irx and ./bochs-2.4.6-patched/ps2/irx/usbd.irx differ
Files ./bochs-2.4.6/ps2/irx/usbhdfsd.irx and ./bochs-2.4.6-patched/ps2/irx/usbhdfsd.irx differ
diff -ruNwb ./bochs-2.4.6/ps2/PS2Init.cpp ./bochs-2.4.6-patched/ps2/PS2Init.cpp
--- ./bochs-2.4.6/ps2/PS2Init.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/PS2Init.cpp	2011-07-05 12:47:03.609375000 +0200
@@ -0,0 +1,93 @@
+#include <kernel.h>
+#include <sifrpc.h>
+#include <stdio.h>
+#include <loadfile.h>
+#include <iopcontrol.h>
+#include <iopheap.h>
+#include <sbv_patches.h>
+
+#include "PS2Init.h"
+#include "cdvd/cdvd_rpc.h"
+
+static const unsigned int ModulesNum = 5;
+static char *ModulesList[ModulesNum] =
+{
+   "rom0:XSIO2MAN",
+   "rom0:XMCMAN",
+   "rom0:XMCSERV",
+   "rom0:PADMAN",
+   "rom0:LIBSD"
+};
+
+void PS2_Delay(unsigned int count)
+{
+   for ( unsigned int i = 0; i < count; i++ )
+   {
+      unsigned int ret = 0x1000000;
+      do
+      {
+         asm("nop\n"
+             "nop\n"
+             "nop\n"
+             "nop\n"
+            );
+      } while ( ret-- );
+   }
+}
+
+void PS2_LoadModules(void)
+{
+   int result = 0;
+
+   for ( unsigned int i = 0; i < ModulesNum; i++ )
+   {
+      result = SifLoadModule(ModulesList[i], 0, NULL);
+      printf( result >= 0 ?
+             "Module %s: successfully loaded\n" :
+             "Module %s: failed to load module\n",
+             ModulesList[i] );
+   }
+
+   SifExecModuleBuffer(&usbd_irx, size_usbd_irx, 0, NULL, &result);
+   printf( result >= 0 ?
+          "Module usbd.irx: successfully loaded\n" :
+          "Module usbd.irx: failed to load module\n" );
+
+   SifExecModuleBuffer(&usbhdfsd_irx, size_usbhdfsd_irx, 0, NULL, &result);
+   printf( result >= 0 ?
+          "Module usbhdfsd.irx: successfully loaded\n" :
+          "Module usbhdfsd.irx: failed to load module\n" );
+
+   SifExecModuleBuffer(&cdvd_irx, size_cdvd_irx, 0, NULL, &result);
+   printf( result >= 0 ?
+          "Module cdvd.irx: successfully loaded\n" :
+          "Module cdvd.irx: failed to load module\n" );
+}
+
+void PS2_Init(void)
+{
+   // KarasQ: If you run through ps2client.exe you should
+   // disable this section
+#if 1
+   SifIopReset("rom0:UDNL rom0:EELOADCNF",0);
+   while(!SifIopSync());
+#endif
+
+   fioExit();
+   SifExitIopHeap();
+   SifLoadFileExit();
+   SifExitRpc();
+   SifExitCmd();
+
+   SifInitRpc(0);
+   FlushCache(0);
+   FlushCache(2);
+
+   sbv_patch_enable_lmb();
+   sbv_patch_disable_prefix_check();
+
+   PS2_LoadModules();
+   PS2_Delay(5);
+
+   CDVD_Init();
+}
diff -ruNwb ./bochs-2.4.6/ps2/PS2Init.h ./bochs-2.4.6-patched/ps2/PS2Init.h
--- ./bochs-2.4.6/ps2/PS2Init.h	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/PS2Init.h	2011-06-27 23:03:53.109375000 +0200
@@ -0,0 +1,18 @@
+#ifndef __PLAYSTATION2_H_
+#define __PLAYSTATION2_H_
+
+extern void *cdvd_irx;
+extern int size_cdvd_irx;
+
+extern void *usbd_irx;
+extern int size_usbd_irx;
+
+extern void *usbhdfsd_irx;
+extern int size_usbhdfsd_irx;
+
+void PS2_LoadModules(void);
+void PS2_Delay(unsigned int count);
+void PS2_Init(void);
+
+#endif
+
diff -ruNwb ./bochs-2.4.6/ps2/PS2Time.cpp ./bochs-2.4.6-patched/ps2/PS2Time.cpp
--- ./bochs-2.4.6/ps2/PS2Time.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/PS2Time.cpp	2011-06-27 23:03:53.109375000 +0200
@@ -0,0 +1,228 @@
+/*
+ *  Copyright (C) 2010  Krystian Karas <k4rasq@gmail.com>
+ *
+ *  I release it for fully free use by anyone, anywhere, for any purpose.
+ *  But I still retain the copyright, so no one else can limit this release.
+ */
+
+#include <libcdvd.h>
+#include <osd_config.h>
+
+#include "PS2Time.h"
+
+// Static data
+const unsigned int PS2Time::MonthsTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
+const unsigned int PS2Time::MonthsTableDays[12] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
+
+PS2Time *PS2Time::m_Instance = 0;
+
+PS2Time::PS2Time() :
+   m_LeapYearsNum(0),
+   m_GMTOffset(0),
+   m_DaylightSaving(-1)
+{
+   if ( UpdatePS2Clock() )
+   {
+      // Set GMT and Daylight Saving
+      m_GMTOffset = configGetTimezone() / 60;
+      m_DaylightSaving = configIsDaylightSavingEnabled();
+
+      // It's necessary to init valid value to get valid time
+      m_PS2Clock.is_leap_year = isLeapYear(m_PS2Clock.year);
+
+      // It's necessary to set leap years value to get valid time
+      setLeapYearsNum(UNIX_START_YEAR, m_PS2Clock.year);
+   }
+}
+
+PS2Time::~PS2Time()
+{
+   if ( m_Instance )
+      delete m_Instance;
+
+   m_Instance = 0;
+}
+
+PS2Time *PS2Time::Instance()
+{
+   if ( !m_Instance )
+      m_Instance = new PS2Time;
+
+   return m_Instance;
+}
+
+bool PS2Time::setLeapYearsNum(int startYear, int endYear)
+{
+   int i = 0;
+
+   if ( startYear > endYear )
+      return false;
+
+   for (i = startYear; i < endYear; i++)
+      if ( isLeapYear(i) ) m_LeapYearsNum++;
+
+   return true;
+}
+
+int PS2Time::getSecFromData(TimeData &date)
+{
+   unsigned int seconds = 0;
+
+   if ( date.month > 1 && date.is_leap_year )
+      seconds += 86400; // 24 hours
+
+   seconds += MonthsTableDays[date.month] * 86400;
+   seconds += (date.day - 1) * 86400;
+   seconds += date.hour * 3600;
+   seconds += date.minute * 60;
+   seconds += date.second;
+
+   return seconds;
+}
+
+time_t PS2Time::getTime(time_t *timer)
+{
+   if ( timer )
+   {
+      *timer = UpdatePS2Clock() ? ((m_PS2Clock.year * 365 - UNIX_START_YEAR * 365) +
+         getLeapYearsNum()) * 24 * 60 * 60 + getSecFromData(m_PS2Clock) : -1;
+      return *timer;
+   }
+   else
+   {
+      return UpdatePS2Clock() ? ((m_PS2Clock.year * 365 - UNIX_START_YEAR * 365) +
+         getLeapYearsNum()) * 24 * 60 * 60 + getSecFromData(m_PS2Clock) : -1;
+   }
+}
+
+
+struct tm *PS2Time::getLocaltime(time_t *timer) {
+   static struct tm PS2_Date;
+
+   if ( UpdatePS2Clock() && !timer )
+   {
+      PS2_Date.tm_sec   = m_PS2Clock.second;
+      PS2_Date.tm_min   = m_PS2Clock.minute;
+      PS2_Date.tm_hour  = m_PS2Clock.hour;
+      PS2_Date.tm_mday  = m_PS2Clock.day;
+      PS2_Date.tm_mon   = m_PS2Clock.month;
+      PS2_Date.tm_year  = m_PS2Clock.year; // !: years since 1900 required
+      PS2_Date.tm_wday  = getWeekDay(PS2_Date.tm_mday, PS2_Date.tm_mon, PS2_Date.tm_year);
+      PS2_Date.tm_yday  = MonthsTableDays[PS2_Date.tm_mon] + PS2_Date.tm_mday;
+      PS2_Date.tm_isdst = m_DaylightSaving;
+
+      // Fixing values
+      PS2_Date.tm_year -= 1900;
+
+      if ( PS2_Date.tm_mon > 1 && m_PS2Clock.is_leap_year )
+         ++PS2_Date.tm_yday;
+   }
+   else if ( timer )
+   {
+      int i;
+      register time_t work = *timer % (24 * 60 * 60);
+
+      PS2_Date.tm_sec   = work % 60; work /= 60;
+      PS2_Date.tm_min   = work % 60;
+      PS2_Date.tm_hour  = work / 60;
+
+      work = *timer / (24 * 60 * 60);
+
+      PS2_Date.tm_wday = (work + 4) % 7;
+
+      for ( i = UNIX_START_YEAR; ; ++i ) {
+         register time_t k = isLeapYear(i) ? 366 : 365;
+
+         if ( work >= k )
+            work -= k;
+         else
+            break;
+      }
+
+      PS2_Date.tm_year = i - 1900;
+      PS2_Date.tm_yday = work;
+      PS2_Date.tm_mday = 1;
+
+      if ( isLeapYear(i) && (work > 58) ) {
+         if ( work == 59 )
+            PS2_Date.tm_mday = 2;
+
+         work -= 1;
+      }
+
+      for ( i = 11; i && (MonthsTableDays[i] > work); --i );
+
+      PS2_Date.tm_mon = i;
+      PS2_Date.tm_mday += work - MonthsTableDays[i];
+   }
+
+   return &PS2_Date;
+}
+
+bool PS2Time::UpdatePS2Clock() {
+   CdvdClock_t Clock;
+
+   if ( !cdReadClock(&Clock) ) {
+      return false;
+   }
+
+   m_PS2Clock.year   = BCD2DEC(Clock.year);         // Warning!: RTC returns year less 2000
+   m_PS2Clock.month  = BCD2DEC(Clock.month) & 0x0F; // Warning!: RTC return month values 1 - 12
+   m_PS2Clock.day    = BCD2DEC(Clock.day) & 0x1F;
+   m_PS2Clock.hour   = BCD2DEC(Clock.hour);         // Warning!: Hour in Japan (GMT + 9)
+   m_PS2Clock.minute = BCD2DEC(Clock.minute);
+   m_PS2Clock.second = BCD2DEC(Clock.second);
+
+   // Fixing warnings
+   m_PS2Clock.hour = (m_PS2Clock.hour - 9) + m_GMTOffset + m_DaylightSaving;
+   m_PS2Clock.year += 2000;
+   m_PS2Clock.month--;
+
+   if ( m_PS2Clock.hour < 0 ) // is day changed?
+   {
+      m_PS2Clock.hour += 24;
+
+      if ( --m_PS2Clock.day == 0 ) // is month changed?
+      {
+         if ( --m_PS2Clock.month < 0 ) // is year changed?
+         {
+            m_PS2Clock.month = 11;
+
+            // So, now we have to fix leap years number and year...
+            if ( m_PS2Clock.is_leap_year || !isLeapYear(m_PS2Clock.year - 1) ) {
+               m_PS2Clock.year--;
+               m_PS2Clock.is_leap_year = false;
+            } else {
+               m_LeapYearsNum--;
+               m_PS2Clock.year--;
+               m_PS2Clock.is_leap_year = true;
+            }
+         }
+
+         // Change day to last day of previous month
+         m_PS2Clock.day = MonthsTable[m_PS2Clock.month];
+
+         // Check if the changed month is not February and it haven't extra day
+         if ( m_PS2Clock.month == 1 && m_PS2Clock.is_leap_year )
+            ++m_PS2Clock.day;
+      }
+   }
+
+   return true;
+}
+
+int PS2Time::getWeekDay(int day, int month, int year)
+{
+   if ( month > 2 )
+      month -= 2;
+   else
+   {
+      month += 10;
+      year--;
+   }
+
+   int w = year / 100;
+   year %= 100;
+
+   return (day + (13 * month - 1) / 5 + year + year / 4 + w / 4 + 5 * w) % 7;
+}
diff -ruNwb ./bochs-2.4.6/ps2/PS2Time.h ./bochs-2.4.6-patched/ps2/PS2Time.h
--- ./bochs-2.4.6/ps2/PS2Time.h	1970-01-01 01:00:00.000000000 +0100
+++ ./bochs-2.4.6-patched/ps2/PS2Time.h	2011-06-27 23:03:53.109375000 +0200
@@ -0,0 +1,94 @@
+/*
+ *  Copyright (C) 2010  Krystian Karas <k4rasq@gmail.com>
+ *
+ *  I release it for fully free use by anyone, anywhere, for any purpose.
+ *  But I still retain the copyright, so no one else can limit this release.
+ */
+
+#ifndef _LIB_TIME_H_
+#define _LIB_TIME_H_
+
+#include <time.h>
+
+#define UNIX_START_YEAR  1970
+
+#define BCD2DEC(bcd)     ( ((((bcd) >> 4) & 0x0F) * 10) + ((bcd) & 0x0F) )
+
+// Singleton class!
+// use: PS2Time::FunctionName(); or PS2Time::Instance->FunctionName();
+class PS2Time
+{
+   public:
+      static const unsigned int MonthsTable[];
+      static const unsigned int MonthsTableDays[];
+
+      typedef struct {
+         int year;
+         int month;
+         int day;
+         int hour;
+         int minute;
+         int second;
+         bool is_leap_year;
+      } TimeData;
+
+      /* Function isLeapYear(); checks if year is leap */
+
+      bool isLeapYear(int Year) {
+         return ((Year % 4 == 0 && Year % 100 != 0) || Year % 400 == 0) ? true : false;
+      }
+
+      /* Function setLeapYearsNum() sets numbers of leap years since
+       * startYear to endYear and return false if startYear > endYear
+       * otherwise returns true
+       */
+
+      bool setLeapYearsNum(int startYear, int endYear);
+
+      /* Function getSecFromData() returns number of seconds
+       * since new year to current data.
+       * date need to be set before you call this function!
+       */
+
+      int getSecFromData(TimeData &date);
+
+      /* Function getLeapYearsNum() returns current value of
+       * leap years.
+       */
+
+      int getLeapYearsNum() {
+         return m_LeapYearsNum;
+      }
+
+      /* Function getTime() returns UNIX time (number of seconds
+       * since 1 January of 1970 or other defined in UNIX_START_YEAR)
+       */
+
+      time_t getTime(time_t *t);
+
+      /* Function getLocaltime() fill tm struct with
+       * date values and return address to this structure
+       */
+
+      struct tm *getLocaltime(time_t *t);
+
+      static PS2Time *Instance();
+
+   protected:
+      PS2Time();
+     ~PS2Time();
+
+   private:
+      static PS2Time *m_Instance;
+
+      int m_LeapYearsNum;
+      int m_GMTOffset;
+      int m_DaylightSaving;
+
+      TimeData m_PS2Clock;
+
+      bool UpdatePS2Clock();
+      int getWeekDay(int day, int month, int year);
+};
+
+#endif
